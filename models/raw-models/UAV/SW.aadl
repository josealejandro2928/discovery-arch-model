package SW
public
	with Base_Types;
	with Drivers;
	with CASE_Model_Transformations;
	renames CASEAgree::all;
	with CASE_Properties;
	with CASE_Scheduling;
	with CMASI;
	renames AGREE_PLTL::all;

	with CM_Property_Set;
	with HAMR;
	with CASEAsyncAgree;

	------------------
	-- Radio Driver --
	------------------
	thread RadioDriver_Attestation_thr extends Drivers::RadioDriver
		features
			am_request: in event data port CASE_Model_Transformations::CASE_AttestationRequestMsg.Impl;
			am_response: out event data port CASE_Model_Transformations::CASE_AttestationResponseMsg.Impl;
		properties
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 20ms .. 20ms;
			Stack_Size => CM_Property_Set::Stack_Size;
		annex agree {**
			-- 	Virtual Events	
			eq Dispatch: bool;
			eq Complete: bool;
			
			-- 	AADL/HAMR Semantics
			guarantee Sem_Radio_Output_Event_Hold_send_data "Output event should hold till next Complete" : 
				not Complete => (event(send_data) = prev(event(send_data), false));
			guarantee Sem_Radio_Output_Data_Hold_send_data "Output data should hold till next Complete" : 
				not Complete => (true -> (send_data = pre(send_data)));
				
			guarantee Sem_Radio_Output_Event_Hold_AutomationRequest "Output event should hold till next Complete" : 
				not Complete => (event(AutomationRequest) = prev(event(AutomationRequest), false));
			guarantee Sem_Radio_Output_Data_Hold_AutomationRequest "Output data should hold till next Complete" : 
				not Complete => (true -> (AutomationRequest = pre(AutomationRequest)));
				
			guarantee Sem_Radio_Output_Event_Hold_LineSearchTask "Output event should hold till next Complete" : 
				not Complete => (event(LineSearchTask) = prev(event(LineSearchTask), false));
			guarantee Sem_Radio_Output_Data_Hold_LineSearchTask "Output data should hold till next Complete" : 
				not Complete => (true -> (LineSearchTask = pre(LineSearchTask)));
				
			guarantee Sem_Radio_Output_Event_Hold_OperatingRegion "Output event should hold till next Complete" : 
				not Complete => (event(OperatingRegion) = prev(event(OperatingRegion), false));
			guarantee Sem_Radio_Output_Data_Hold_OperatingRegion "Output data should hold till next Complete" : 
				not Complete => (true -> (OperatingRegion = pre(OperatingRegion)));
				
			-- Security Requirements				
			assume "The radio receives well-formed messages" : 
				Dispatch => (event(recv_data) => WellformedCASE_RF_Msg(recv_data, GS_ID, UAV_ID));
			guarantee Req001_SW1 "The radio_send outputs only well formed CASE_RF_Msg.Impl types" :
				Complete => (event(send_data) => WellformedCASE_RF_Msg(send_data, UAV_ID, GS_ID));
		**};
	end RadioDriver_Attestation_thr;

	thread implementation RadioDriver_Attestation_thr.Impl extends Drivers::RadioDriver.Impl
	end RadioDriver_Attestation_thr.Impl;

	---------------------
	-- Attestation
	---------------------
	thread CASE_AttestationManager_thr
		features
			trusted_ids: out data port CMASI::AddressArray.i;
			attestation_request: out event data port CASE_Model_Transformations::CASE_AttestationRequestMsg.Impl;
			attestation_response: in event data port CASE_Model_Transformations::CASE_AttestationResponseMsg.Impl;
		properties
			CASE_Properties::Attesting => 100;
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 2ms .. 2ms;
		annex agree {**
			-- 	Virtual Events	
			eq Dispatch: bool;
			eq Complete: bool;
			
			-- 	AADL/HAMR Semantics
			guarantee Sem_AM_Output_Data_Hold_trusted_ids "Output data should hold till next Complete" : 
				not Complete => (true -> (trusted_ids = pre(trusted_ids)));			
		**};						
	end CASE_AttestationManager_thr;

	thread implementation CASE_AttestationManager_thr.Impl
		properties
			CASE_Properties::Component_Impl => "CakeML";
			CASE_Properties::Cache_Timeout => 30 min;
			CASE_Properties::Cache_Size => 3;
			Dispatch_Protocol => Periodic;
			Stack_Size => CM_Property_Set::Stack_Size;
	end CASE_AttestationManager_thr.Impl;

	---------------------
	-- Attestation Gate
	---------------------
	thread CASE_AttestationGate_thr
		features
			trusted_ids: in data port CMASI::AddressArray.i;
			AutomationRequest_in: in event data port CMASI::AddressAttributedMessage.i;
			AutomationRequest_out: out event data port CMASI::AutomationRequest.i;
			OperatingRegion_in: in event data port CMASI::AddressAttributedMessage.i;
			OperatingRegion_out: out event data port CMASI::OperatingRegion.i;
			LineSearchTask_in: in event data port CMASI::AddressAttributedMessage.i;
			LineSearchTask_out: out event data port CMASI::LineSearchTask.i;
		properties
			CASE_Properties::Monitoring => 100;
			CASE_Properties::Component_Spec => ("CASE_AttestationGate_policy");
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 2ms .. 2ms;
			Stack_Size => CM_Property_Set::Stack_Size;
		annex agree {**
			-- 	Virtual Events	
			eq Dispatch: bool;
			eq Complete: bool;
			
			-- 	AADL/HAMR Semantics
			guarantee Sem_AttestationGate_Output_Event_Hold_AutomationRequest_out "Output event should hold till next Complete" : 
				not Complete => (event(AutomationRequest_out) = prev(event(AutomationRequest_out), false));
			guarantee Sem_AttestationGate_Output_Data_Hold_AutomationRequest_out "Output data should hold till next Complete" : 
				not Complete => (true -> (AutomationRequest_out = pre(AutomationRequest_out)));

			guarantee Sem_AttestationGate_Output_Event_Hold_OperatingRegion_out "Output event should hold till next Complete" : 
				not Complete => (event(OperatingRegion_out) = prev(event(OperatingRegion_out), false));
			guarantee Sem_AttestationGate_Output_Data_Hold_OperatingRegion_out "Output data should hold till next Complete" : 
				not Complete => (true -> (OperatingRegion_out = pre(OperatingRegion_out)));

			guarantee Sem_AttestationGate_Output_Event_Hold_LineSearchTask_out "Output event should hold till next Complete" : 
				not Complete => (event(LineSearchTask_out) = prev(event(LineSearchTask_out), false));
			guarantee Sem_AttestationGate_Output_Data_Hold_LineSearchTask_out "Output data should hold till next Complete" : 
				not Complete => (true -> (LineSearchTask_out = pre(LineSearchTask_out)));
					
			-- Security Requirements
			fun IS_EQUAL(lop : CMASI::Address.i, rop : CMASI::Address.i) : bool = 
					      (forall i in indices(lop.value), lop.value[i] = rop.value[i]);
			fun IS_TRUSTED(ids : CMASI::AddressArray.i, srcid : CMASI::Address.i) : bool = (exists id in ids.value, IS_EQUAL(srcid, id));
			guarantee CASE_AttestationGate_policy "Only messages from trusted sources shall be forwarded" :
			Complete => (
				if event(AutomationRequest_in) and IS_TRUSTED(trusted_ids, AutomationRequest_in.id) then event(AutomationRequest_out) and not (event(OperatingRegion_out) or event(LineSearchTask_out)) and AutomationRequest_out = AutomationRequest_in.payload.AutomationRequest
				else if event(OperatingRegion_in) and IS_TRUSTED(trusted_ids, OperatingRegion_in.id) then event(OperatingRegion_out) and not (event(AutomationRequest_out) or event(LineSearchTask_out)) and OperatingRegion_out = OperatingRegion_in.payload.OperatingRegion
				else if event(LineSearchTask_in) and IS_TRUSTED(trusted_ids, LineSearchTask_in.id) then event(LineSearchTask_out) and not (event(AutomationRequest_out) or event(OperatingRegion_out)) and LineSearchTask_out = LineSearchTask_in.payload.LineSearchTask
				else not (event(AutomationRequest_out) or event(OperatingRegion_out) or event(LineSearchTask_out))
				);
				
		**};
	end CASE_AttestationGate_thr;

	thread implementation CASE_AttestationGate_thr.Impl
	end CASE_AttestationGate_thr.Impl;

	-------------------------------------
	-- Line Search Task message Filter --
	-------------------------------------
	thread CASE_Filter_LST_thr
		features
			filter_in: in event data port CMASI::LineSearchTask.i;
			filter_out: out event data port CMASI::LineSearchTask.i;
		properties
			CASE_Properties::Filtering => 100;
			CASE_Properties::Component_Spec => ("Req_Filter_LST");
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 2ms .. 2ms;
			Stack_Size => CM_Property_Set::Stack_Size;
		annex agree {**
			-- 	Virtual Events	
			eq Dispatch: bool;
			eq Complete: bool;
			
			-- 	AADL/HAMR Semantics
			guarantee Sem_Filter_LST_Output_Event_Hold_filter_out "Output event should hold till next Complete" : 
				not Complete => (event(filter_out) = prev(event(filter_out), false));
			guarantee Sem_Filter_LST_Output_Data_Hold_filter_out "Output data should hold till next Complete" : 
				not Complete => (true -> (filter_out = pre(filter_out)));
				
			-- Security Requirements				
			guarantee Req_Filter_LST "Well-formed Line Search Task message" :
				Complete => (			
						if event(filter_in) and WELL_FORMED_LINE_SEARCH_TASK(filter_in) then
						   event(filter_out) and (filter_out = filter_in)
						else not(event(filter_out))
				);
		**};
	end CASE_Filter_LST_thr;

	thread implementation CASE_Filter_LST_thr.Impl
	end CASE_Filter_LST_thr.Impl;

	-------------------------------------
	-- Operating Region message Filter --
	-------------------------------------
	thread CASE_Filter_OR_thr
		features
			filter_in: in event data port CMASI::OperatingRegion.i;
			filter_out: out event data port CMASI::OperatingRegion.i;
		properties
			CASE_Properties::Filtering => 100;
			CASE_Properties::Component_Spec => ("Req_Filter_OR");
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 2ms .. 2ms;
			Stack_Size => CM_Property_Set::Stack_Size;
		annex agree {**
			-- 	Virtual Events	
			eq Dispatch: bool;
			eq Complete: bool;
			
			-- 	AADL/HAMR Semantics
			guarantee Sem_Filter_O_Output_Event_Hold_filter_out "Output event should hold till next Complete" : 
				not Complete => (event(filter_out) = prev(event(filter_out), false));
			guarantee Sem_Filter_O_Output_Data_Hold_filter_out "Output data should hold till next Complete" : 
				not Complete => (true -> (filter_out = pre(filter_out)));
				
			-- Security Requirements				
			guarantee Req_Filter_OR "Well-formed Operating Region message" :
				Complete => (
						if event(filter_in) and WELL_FORMED_OPERATING_REGION(filter_in) then
						   event(filter_out) and (filter_out = filter_in)
						else not(event(filter_out))
				);
		**};
	end CASE_Filter_OR_thr;

	thread implementation CASE_Filter_OR_thr.Impl
	end CASE_Filter_OR_thr.Impl;
	---------------------------------------
	-- Automation Request message Filter --
	---------------------------------------
	thread CASE_Filter_AReq_thr
		features
			filter_in: in event data port CMASI::AutomationRequest.i;
			filter_out_UXAS: out event data port CMASI::AutomationRequest.i;
			filter_out_MON_REQ: out event data port CMASI::AutomationRequest.i;
		properties
			CASE_Properties::Filtering => 100;
			CASE_Properties::Component_Spec => ("Req_Filter_AReq");
			Dispatch_Protocol => Periodic;

			Period => 500ms;
			Compute_Execution_Time => 2ms .. 2ms;
			Stack_Size => CM_Property_Set::Stack_Size;
		annex agree {**
			-- 	Virtual Events	
			eq Dispatch: bool;
			eq Complete: bool;
			
			-- 	AADL/HAMR Semantics
			guarantee Sem_Filter_AReq_Output_Event_Hold_filter_out_UXAS "Output event should hold till next Complete" : 
				not Complete => (event(filter_out_UXAS) = prev(event(filter_out_UXAS), false));
			guarantee Sem_Filter_AReq_Output_Data_Hold_filter_out_UXAS "Output data should hold till next Complete" : 
				not Complete => (true -> (filter_out_UXAS = pre(filter_out_UXAS)));

			guarantee Sem_Filter_AReq_Output_Event_Hold_filter_out_MON_REQ "Output event should hold till next Complete" : 
				not Complete => (event(filter_out_MON_REQ) = prev(event(filter_out_MON_REQ), false));
			guarantee Sem_Filter_AReq_Output_Data_Hold_filter_out_MON_REQ "Output data should hold till next Complete" : 
				not Complete => (true -> (filter_out_MON_REQ = pre(filter_out_MON_REQ)));
					
			-- Security Requirements				
			guarantee Req_Filter_AReq "Well-formed Automation Request message" :
				Complete => (			
						if event(filter_in) and WELL_FORMED_AUTOMATION_REQUEST(filter_in) then
						   event(filter_out_UXAS) and
						   event(filter_out_MON_REQ) and
						   (filter_out_UXAS = filter_in) and
						   (filter_out_MON_REQ = filter_in)
					 else not (event (filter_out_UXAS)) and
					      not (event(filter_out_MON_REQ))
				);
		**};
	end CASE_Filter_AReq_thr;

	thread implementation CASE_Filter_AReq_thr.Impl
	end CASE_Filter_AReq_thr.Impl;

	----------
	-- UxAS --
	----------
	thread UxAS_thr
		features
			AutomationRequest: in event data port CMASI::AutomationRequest.i;
			AirVehicleState: in event data port CMASI::AirVehicleState.i;
			OperatingRegion: in event data port CMASI::OperatingRegion.i;
			LineSearchTask: in event data port CMASI::LineSearchTask.i;
			AutomationResponse: out event data port CMASI::AutomationResponse.i;
		properties
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 2ms .. 2ms;
			Stack_Size => CM_Property_Set::Stack_Size;
		annex agree {**
			-- 	Virtual Events	
			eq Dispatch: bool;
			eq Complete: bool;
			
			-- 	AADL/HAMR Semantics
			guarantee Sem_UxAS_Output_Event_Hold_AutomationResponse "Output event should hold till next Complete" : 
				not Complete => (event(AutomationResponse) = prev(event(AutomationResponse), false));
			guarantee Sem_UxAS_Output_Data_Hold_AutomationResponse "Output data should hold till next Complete" : 
				not Complete => (true -> (AutomationResponse = pre(AutomationResponse)));
		**};
	end UxAS_thr;

	thread implementation UxAS_thr.Impl
	end UxAS_thr.Impl;

	------------------------------
	-- Request-Response Monitor --
	------------------------------
	thread CASE_Monitor_Req_thr
		features
			reqt: in event data port CMASI::AutomationRequest.i;
			resp: in event data port CMASI::AutomationResponse.i;
			alert: out event data port Base_Types::Boolean;
		properties
			CASE_Properties::Monitoring => 100; -- marks this component as a monitor
			CASE_Properties::Monitor_Latched => false; -- indicates if the monitor is latched
			CASE_Properties::Component_Spec => ("Req002_ReqRespMonitorEvent"); -- monitor guarantee
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 2ms .. 2ms;
			Stack_Size => CM_Property_Set::Stack_Size;
		annex agree {**
			-- 	Virtual Events	
			eq Dispatch: bool;
			eq Complete: bool;
			
			-- 	AADL/HAMR Semantics
			guarantee Sem_Monitor_Req_Output_Event_Hold_alert "Output event should hold till next Complete" : 
				not Complete => (event(alert) = prev(event(alert), false));
			
			-- a constant generated from the component property above, handy for expressing the monitor guarantee
			const is_latched : bool = Get_Property(this, CASE_Properties::Monitor_Latched);
			-- Monitor policy (models the expected behavior in terms of the input ports)
			-- AutomationResponse (resp) occurs within two scheduling cycles after AutomationRequest (reqt)
			const nMonitorInvocations : int = 10; -- user-defined value for "days"
			const FAIL : int = nMonitorInvocations + 1;
			fun Inc (x:int) : int = if x < nMonitorInvocations then x+1 else FAIL;
			-- init is used to model first cycle behavior
			eq init : bool = 
   				if Complete then false
   				else prev(init, true);

			eq ticks : int =
   				if Complete then
      				if prev(init, true) then 			
	                	(if event(resp) then FAIL
						else if event (reqt) then 1 else 0)
					else
               					if (event(reqt) and event(resp)) then
                   					FAIL
                				else
                					if not (event(reqt) or event(resp)) then
                   						(if (pre(ticks) = 0) then 0 else Inc (pre(ticks)))
                					else
                						if event(resp) then
                   							(if (1 <= pre(ticks)) then 0 else FAIL)
                						else -- rqts set ticks to 1, so rqt.rqt.resp is fine
                   							1	
				else prev(ticks, 0);
						               
			eq response_received_in_time : bool = ticks < nMonitorInvocations;
			property CASE_Monitor_Req_Resp_policy = Historically(response_received_in_time);
			guarantee Req_CASE_Monitor2 "A violation of the monitor policy shall trigger an alert, and observed input shall not be propagated." :
				Complete => (
					if (is_latched and pre(event(alert))) or not CASE_Monitor_Req_Resp_policy then
						event(alert) and alert = true
					else
						if CASE_Monitor_Req_Resp_policy then
							not event(alert) and alert = false
						else
							event(alert) and alert = true
            	);
		**};
	end CASE_Monitor_Req_thr;

	thread implementation CASE_Monitor_Req_thr.Impl
	end CASE_Monitor_Req_thr.Impl;

	----------------------------------------
	-- Automation Response message Filter --
	----------------------------------------
	thread CASE_Filter_ARes_thr
		features
			filter_in: in event data port CMASI::AutomationResponse.i;
			filter_out: out event data port CMASI::AutomationResponse.i;
		properties
			CASE_Properties::Filtering => 100;
			CASE_Properties::Component_Spec => ("Req_Filter_ARes");
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 2ms .. 2ms;
			Stack_Size => CM_Property_Set::Stack_Size;
		annex agree {**
			-- 	Virtual Events	
			eq Dispatch: bool;
			eq Complete: bool;
			
			-- 	AADL/HAMR Semantics
			guarantee Sem_Filter_ARes_Output_Event_Hold_filter_out "Output event should hold till next Complete" : 
				not Complete => (event(filter_out) = prev(event(filter_out), false));
			guarantee Sem_Filter_ARes_Output_Data_Hold_filter_out "Output data should hold till next Complete" : 
				not Complete => (true -> (filter_out = pre(filter_out)));
				
			-- Security Requirements				
			guarantee Req_Filter_ARes "Well-formed Automation Response message" :
				Complete => (
						if (event(filter_in) and WELL_FORMED_AUTOMATION_RESPONSE(filter_in)) then
						   (event(filter_out) and (filter_out = filter_in))
						               else not(event (filter_out))
	               );
			guarantee Req_WellFormed_Filter_AResp "Messages that are not well formed should be filtered out" : 
				Complete => (event(filter_out) => WELL_FORMED_AUTOMATION_RESPONSE(filter_out));						               
		**};
	end CASE_Filter_ARes_thr;

	thread implementation CASE_Filter_ARes_thr.Impl
		properties
			Dispatch_Protocol => Periodic;
	end CASE_Filter_ARes_thr.Impl;

	------------------------
	-- Fly Zones Database --
	------------------------
	thread FlyZonesDatabase_thr
		-- The KeepInZoneDatabase is a collection of polygons that represent areas on a map that the UAV can traverse.
		-- The database is populated at build-time and stored in memory.
		features
			keep_in_zones: out data port CMASI::Polygon.i;
			keep_out_zones: out data port CMASI::Polygon.i;
		properties
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 2ms .. 2ms;
			Stack_Size => CM_Property_Set::Stack_Size;
		annex agree {**
			-- 	Virtual Events	
			eq Dispatch: bool;
			eq Complete: bool;
			
			-- 	AADL/HAMR Semantics
			guarantee Sem_FlyZonesDatabase_Output_Data_Hold_keep_in_zones "Output data should hold till next Complete" : 
				not Complete => (true -> (keep_in_zones = pre(keep_in_zones)));

			guarantee Sem_FlyZonesDatabase_Output_Data_Hold_keep_out_zones "Output data should hold till next Complete" : 
				not Complete => (true -> (keep_out_zones = pre(keep_out_zones)));
			
			-- Functional Requirements					
			guarantee "Keep in zones do not change" : Complete => (true -> keep_in_zones = pre(keep_in_zones));
			guarantee "Keep out zones do not change" : Complete => (true -> keep_out_zones = pre(keep_out_zones));
		**};
	end FlyZonesDatabase_thr;

	thread implementation FlyZonesDatabase_thr.Impl
	end FlyZonesDatabase_thr.Impl;

	----------------------
	-- Geofence Monitor --
	----------------------
	thread CASE_Monitor_Geo_thr
		features
			keep_in_zones: in data port CMASI::Polygon.i;
			keep_out_zones: in data port CMASI::Polygon.i;
			alert: out event port;
			observed: in event data port CMASI::AutomationResponse.i;
			output: out event data port CMASI::AutomationResponse.i;
		properties
			CASE_Properties::Monitoring => 100; -- marks this component as a monitor
			CASE_Properties::Component_Spec => ("GeofenceMonitor_alert_event", "GeofenceMonitor_output_event",
				"GeofenceMonitor_output_data"); -- monitor guarantee
			CASE_Properties::Monitor_Latched => true; -- indicates if the monitor is latched
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 2ms .. 2ms;
			Stack_Size => CM_Property_Set::Stack_Size;
		annex agree {**
			-- 	Virtual Events	
			eq Dispatch: bool;
			eq Complete: bool;
			
			-- 	AADL/HAMR Semantics
			guarantee Sem_Geo_Mon_Output_Event_Hold_output "Output event should hold till next Complete" : 
				not Complete => (event(output) = prev(event(output), false));
			guarantee Sem_Geo_Mon_Output_Data_Hold_output "Output data should hold till next Complete" : 
				not Complete => (true -> (output = pre(output)));
			guarantee Sem_Geo_Mon_Output_Event_Hold_alert "Output event should hold till next Complete" : 
				not Complete => (event(alert) = prev(event(alert), false));
				
			-- a constant generated from the component property above, handy for expressing the monitor guarantee
			const is_latched : bool = Get_Property(this, CASE_Properties::Monitor_Latched);
			-- Monitor policy (models the expected behavior in terms of the input ports)
			property CASE_Monitor_Coord_policy =
				Historically(event(observed) =>
					(WAYPOINTS_IN_ZONE(GET_MISSION_COMMAND(observed), keep_in_zones) and
					             WAYPOINTS_NOT_IN_ZONE(GET_MISSION_COMMAND(observed), keep_out_zones)
					and not (DUPLICATES_IN_MISSION(GET_MISSION_COMMAND(observed)))));
			-- Tutorial Version of Generated Contract
			 guarantee Req_CASE_Monitor1 "A violation of the monitor policy shall trigger an alert, and observed input shall not be propagated." :
				Complete => (
			                if (is_latched and pre(event(alert))) or not CASE_Monitor_Coord_policy then
			                    event(alert) and not event(output)
			                else
			                    if event(observed) then
			                        if CASE_Monitor_Coord_policy then
			                            not event(alert) and event(output) and output = observed
			                        else
			                            event(alert) and not event(output)
			                    else
			                        not event(alert) and not event(output)
				);
			guarantee Req_WellFormed_Monitor_AResp "Messages that are not well formed should be filtered out" : 
				Complete => (event(output) => WELL_FORMED_AUTOMATION_RESPONSE(output));	
				
			-- EGM: AGREE is not able to prove MON_GEO is consistent with the below version of the contract.
			-- This version, I think, is what Junaid originally defined -- Need to verify
			-- Monitor guarantee (guarantees on the output ports in terms of the input ports and monitor policy)
			--			guarantee GeofenceMonitor_alert_event "An alert is generated only when observed is invalid" :
			--				event(alert) <=> (false -> (is_latched and pre(event(alert))) or not CASE_Monitor_Coord_policy);
			--			guarantee GeofenceMonitor_output_event "The output event fires only when observed is valid" :
			--				event(output) <=> (event(observed) and not (event(alert)));
			--			guarantee GeofenceMonitor_output_data "Output is equal to observed when observed is valid" :
			--				event(observed) and not (event(alert)) => (output = observed);
		**};
	end CASE_Monitor_Geo_thr;

	thread implementation CASE_Monitor_Geo_thr.Impl
	end CASE_Monitor_Geo_thr.Impl;

	----------------------
	-- Waypoint Manager --
	----------------------
	thread WaypointPlanManagerService_thr
		features
			AutomationResponse: in event data port CMASI::AutomationResponse.i;
			AirVehicleState: in event data port CMASI::AirVehicleState.i;
			MissionCommand: out event data port CMASI::MissionCommand.i;
			ReturnHome: in event port;
		properties
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 2ms .. 2ms;
			Stack_Size => CM_Property_Set::Stack_Size;
		annex agree {**
			-- 	Virtual Events	
			eq Dispatch: bool;
			eq Complete: bool;
			
			-- 	AADL/HAMR Semantics
			guarantee Sem_WPM_Output_Event_Hold_MissionCommand "Output event should hold till next Complete" : 
				not Complete => (event(MissionCommand) = prev(event(MissionCommand), false));
			guarantee Sem_WPM_Output_Data_Hold_MissionCommand "Output data should hold till next Complete" : 
				not Complete => (true -> (MissionCommand = pre(MissionCommand)));
				
			-- Security Requirements					        		
			assume Req_WPM_Good_Automation_Response "The Waypoint Manager shall receive valid automation response" :
				Dispatch => (event(AutomationResponse) => WELL_FORMED_AUTOMATION_RESPONSE(AutomationResponse));
			assume Req_WPM_Good_AirVehicle_State "The Waypoint Manager shall receive well-formed air vehicle state messages" :
				Dispatch => (event(AirVehicleState) => WELL_FORMED_AIR_VEHICLE_STATE(AirVehicleState));
			assume Req002_WPM "The set of waypoints received will not have duplicates in them" :
				Dispatch => (event(AutomationResponse) => not DUPLICATES_IN_MISSION(GET_MISSION_COMMAND(AutomationResponse)));	
			guarantee Req_WPM_Good_Mission_Command "The Waypoint Manager shall output valid mission commands" : 
				Complete => (event(MissionCommand) => WELL_FORMED_MISSION_COMMAND(MissionCommand));
		**};
	end WaypointPlanManagerService_thr;

	thread implementation WaypointPlanManagerService_thr.Impl

	end WaypointPlanManagerService_thr.Impl;

	process SW
		features
			radio_recv: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			radio_send: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			uart_recv: in event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			uart_send: out event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
		annex agree {**
			eq UART_Dispatch: bool;
			eq Radio_Dispatch: bool;
			eq UxAS_Dispatch: bool;
			eq WaypointManager_Dispatch: bool;
			eq FlyZones_Dispatch: bool;
			eq FLT_AReq_Dispatch: bool;
			eq FLT_LST_Dispatch: bool;
			eq FLT_OR_Dispatch: bool;
			eq MON_REQ_Dispatch: bool;
			eq MON_GEO_Dispatch: bool;
			eq AttestationManager_Dispatch: bool;
			eq AttestationGate_Dispatch: bool;
			eq FLT_ARes_Dispatch: bool;
			eq UART_Complete: bool;
			eq Radio_Complete: bool;
			eq UxAS_Complete: bool;
			eq WaypointManager_Complete: bool;
			eq FlyZones_Complete: bool;
			eq FLT_AReq_Complete: bool;
			eq FLT_LST_Complete: bool;
			eq FLT_OR_Complete: bool;
			eq MON_REQ_Complete: bool;
			eq MON_GEO_Complete: bool;
			eq AttestationManager_Complete: bool;
			eq AttestationGate_Complete: bool;
			eq FLT_ARes_Complete: bool;
			eq KeepInZone : CMASI::Polygon.i;
			eq KeepOutZone : CMASI::Polygon.i;
			eq WPM_MissionCommand: CMASI::MissionCommand.i;
			eq WPM_MissionCommand_Event : bool;
			eq WPM_AutomationResponse_Event : bool;
			eq UxAS_AutomationResponse_Event : bool;
			eq Radio_recv_data : CASE_Model_Transformations::CASE_RF_Msg.Impl;
			eq Radio_recv_event : bool;
			
			-- The schedule is based on the SEL4 domain schedule defined in "UAV/behavior_code/kernel/domain_schedule.c".			
			const PERIOD :	 int = 95;			
			eq Frame : int = CASEAsyncAgree::Counter(1, 1, prev(Frame = PERIOD, false));
			assume "SEL4 domain schedule" :
				Radio_Dispatch = (Frame = 1) and
				Radio_Complete = (Frame = 11) and
				AttestationManager_Dispatch = (Frame = 12) and
				AttestationManager_Complete = (Frame = 13) and
				AttestationGate_Dispatch = (Frame = 14) and
				AttestationGate_Complete = (Frame = 15) and
				FLT_AReq_Dispatch = (Frame = 16) and
				FLT_AReq_Complete = (Frame = 17) and
				FLT_LST_Dispatch = (Frame = 18) and 
				FLT_LST_Complete = (Frame = 19) and 
				FLT_OR_Dispatch = (Frame = 20) and
				FLT_OR_Complete = (Frame = 21) and
				UxAS_Dispatch = (Frame = 22) and
				UxAS_Complete = (Frame = 72) and
				FlyZones_Dispatch = (Frame = 73) and
				FlyZones_Complete = (Frame = 74) and
				MON_REQ_Dispatch = (Frame = 75) and
				MON_REQ_Complete = (Frame = 76) and
				FLT_ARes_Dispatch  = (Frame = 77) and   	
				FLT_ARes_Complete  = (Frame = 78) and   	
				MON_GEO_Dispatch = (Frame = 79) and
				MON_GEO_Complete = (Frame = 80) and
				WaypointManager_Dispatch = (Frame = 81) and	
				WaypointManager_Complete = (Frame = 91) and						        	  	
				UART_Dispatch = (Frame = 92) and
				UART_Complete = (Frame = 95);		

--			Radio and UART messages are external inputs to SW. They are sporadic and may arrive at any time. Radio and UART threads are periodic.
--			We assume the messages arrive only when the consumer thread is activated to simplify the modelling.  
			assume Sem_Radio_Event_Hold "Radio event should be latched" : 
				event(radio_recv) => Radio_Dispatch;
			assume Sem_UART_Event_Hold "UART event should be latched" : 
				event(uart_recv) => UART_Dispatch;
				
			assume "The radio receives well-formed messages" : event(radio_recv) => WellformedCASE_RF_Msg(radio_recv, GS_ID, UAV_ID);
			assume "The uart receives well-formed messages" : event(uart_recv) => WellformedCASE_UART_Msg(uart_recv);
			guarantee "The radio_send outputs only well formed CASE_RF_Msg.Impl types" : event(radio_send) => WellformedCASE_RF_Msg(radio_send, UAV_ID, GS_ID);
			guarantee "The uart_send outputs only well formed CASE_UART_Msg.Impl types" : event(uart_send) => WellformedCASE_UART_Msg(uart_send);
			
	    -------------------------------------------------
            -- The system only responds to trusted sources --
            -------------------------------------------------
            eq trustedSourcesOnly : bool;
            guarantee "The system only responds to trusted sources" :
                UxAS_Dispatch => trustedSourcesOnly;
            --------------------------------------------
            -- The uart_send waypoints are geo-fenced --
            --------------------------------------------
            eq geoFenced : bool;
            guarantee "The uart_send waypoints are geo-fenced" :
               WaypointManager_Complete => geoFenced;
		**};
	end SW;

	process implementation SW.Impl
		subcomponents
			FC_UART: thread Drivers::UARTDriver.Impl;
			RADIO: thread RadioDriver_Attestation_thr.Impl;
			FlyZones: thread FlyZonesDatabase_thr.Impl;
			UXAS: thread UxAS_thr.Impl;
			WPM: thread WaypointPlanManagerService_thr.Impl;
			AM: thread CASE_AttestationManager_thr.Impl;
			AM_Gate: thread CASE_AttestationGate_thr.Impl;
			FLT_AReq: thread CASE_Filter_AReq_thr.Impl;
			FLT_OR: thread CASE_Filter_OR_thr.Impl;
			FLT_LST: thread CASE_Filter_LST_thr.Impl;
			MON_REQ: thread CASE_Monitor_Req_thr.Impl;
			FLT_ARes: thread CASE_Filter_ARes_thr.Impl;
			MON_GEO: thread CASE_Monitor_Geo_thr.Impl;
		connections

			------------------
			-- Primary Inputs
			------------------
			c01: port uart_recv -> FC_UART.recv_data;
			c02: port radio_recv -> RADIO.recv_data;

			-----------
			-- FC_UART
			-----------
			c03: port FC_UART.send_data -> uart_send;
			c04: port FC_UART.AirVehicleState_UXAS -> UXAS.AirVehicleState;
			c05: port FC_UART.AirVehicleState_WPM -> WPM.AirVehicleState;

			---------
			-- RADIO
			---------
			c06: port RADIO.send_data -> radio_send;
			c07: port RADIO.AutomationRequest -> AM_Gate.AutomationRequest_in;
			c08: port RADIO.OperatingRegion -> AM_Gate.OperatingRegion_in;
			c09: port RADIO.LineSearchTask -> AM_Gate.LineSearchTask_in;
			c10: port RADIO.am_response -> AM.attestation_response;

			--------------
			-- FlyZones
			--------------
			c11: port FlyZones.keep_in_zones -> MON_GEO.keep_in_zones;
			c12: port FlyZones.keep_out_zones -> MON_GEO.keep_out_zones;

			--------
			-- UXAS
			--------
			c13: port UXAS.AutomationResponse -> FLT_ARes.filter_in;

			--------
			-- WPM
			--------
			c15: port WPM.MissionCommand -> FC_UART.MissionCommand;

			-------
			-- AM
			-------
			c16: port AM.attestation_request -> RADIO.am_request;
			c17: port AM.trusted_ids -> AM_Gate.trusted_ids;

			-----------
			-- AM_GATE
			------------
			c18: port AM_Gate.AutomationRequest_out -> FLT_AReq.filter_in;
			c19: port AM_Gate.OperatingRegion_out -> FLT_OR.filter_in;
			c20: port AM_Gate.LineSearchTask_out -> FLT_LST.filter_in;

			------------
			-- FILTERS
			------------
			c22: port FLT_AReq.filter_out_UXAS -> UXAS.AutomationRequest;
			c23: port FLT_AReq.filter_out_MON_REQ -> MON_REQ.reqt;
			c24: port FLT_OR.filter_out -> UXAS.OperatingRegion;
			c25: port FLT_LST.filter_out -> UXAS.LineSearchTask;
			c26: port FLT_ARes.filter_out -> MON_REQ.resp;
			c27: port FLT_ARes.filter_out -> MON_GEO.observed;

			-------------
			-- MONITORS
			-------------
			c28: port MON_GEO.output -> WPM.AutomationResponse;
			c29: port MON_GEO.alert -> WPM.ReturnHome;

		annex agree {**
           -------------------------------------------------
            -- The system only responds to trusted sources --
            -------------------------------------------------
            eq trusted_ids : CMASI::AddressArray.i = AM.trusted_ids;
            eq trustedAutomationRequest : bool =
                (event(UXAS.AutomationRequest) =>
                    (     IS_TRUSTED(trusted_ids, RADIO.AutomationRequest.id)
                      and RADIO.AutomationRequest.payload.AutomationRequest = UXAS.AutomationRequest
                    ));
            eq trustedLineSearchTask : bool =
                (event(UXAS.LineSearchTask) =>
                    (     IS_TRUSTED(trusted_ids, RADIO.LineSearchTask.id)
                      and RADIO.LineSearchTask.payload.LineSearchTask = UXAS.LineSearchTask
                    ));
            eq trustedOperatingRegion : bool =
                (event(UXAS.OperatingRegion) =>
                    (     IS_TRUSTED(trusted_ids, RADIO.OperatingRegion.id)
                      and RADIO.OperatingRegion.payload.OperatingRegion = UXAS.OperatingRegion
                    ));
            assign trustedSourcesOnly =
                (     trustedAutomationRequest
                  and trustedLineSearchTask
                  and trustedOperatingRegion
                );

            --------------------------------------------
            -- The uart_send waypoints are geo-fenced --
            --------------------------------------------
            eq keep_in_zones : CMASI::Polygon.i = FlyZones.keep_in_zones;
            eq keep_out_zones: CMASI::Polygon.i = FlyZones.keep_out_zones;
            
            eq obeysKeepInZones : bool =
                (event(WPM.AutomationResponse) =>
                    WAYPOINTS_IN_ZONE(GET_MISSION_COMMAND(WPM.AutomationResponse), keep_in_zones)
                );
            eq obeysKeepOutZones : bool =
                (event(WPM.AutomationResponse) =>
                    WAYPOINTS_NOT_IN_ZONE(GET_MISSION_COMMAND(WPM.AutomationResponse), keep_out_zones)
                );
            eq noDuplicates : bool =
                (event(WPM.AutomationResponse) =>
                    not (DUPLICATES_IN_MISSION(GET_MISSION_COMMAND(WPM.AutomationResponse)))
                );
            assign geoFenced = 
                (     obeysKeepInZones
                  and obeysKeepOutZones
                  and noDuplicates
                );
		
			assign Radio_Dispatch = RADIO.Dispatch;
			assign Radio_Complete = RADIO.Complete;
			assign UART_Dispatch = FC_UART.Dispatch;
			assign UART_Complete = FC_UART.Complete;
			assign AttestationManager_Dispatch = AM.Dispatch;
			assign AttestationManager_Complete = AM.Complete;
			assign AttestationGate_Dispatch = AM_Gate.Dispatch;
			assign AttestationGate_Complete = AM_Gate.Complete;			
			assign WaypointManager_Dispatch = WPM.Dispatch;
			assign WaypointManager_Complete = WPM.Complete;
			assign FlyZones_Dispatch = FlyZones.Dispatch;
			assign FlyZones_Complete = FlyZones.Complete;
			assign FLT_AReq_Dispatch = FLT_AReq.Dispatch;
			assign FLT_AReq_Complete = FLT_AReq.Complete;
			assign FLT_LST_Dispatch = FLT_LST.Dispatch;
			assign FLT_LST_Complete = FLT_LST.Complete;
			assign FLT_OR_Dispatch = FLT_OR.Dispatch;
			assign FLT_OR_Complete = FLT_OR.Complete;
			assign MON_REQ_Dispatch = MON_REQ.Dispatch;
			assign MON_REQ_Complete = MON_REQ.Complete;
			assign MON_GEO_Dispatch = MON_GEO.Dispatch;
			assign MON_GEO_Complete = MON_GEO.Complete;
			assign FLT_ARes_Dispatch = FLT_ARes.Dispatch;
			assign FLT_ARes_Complete = FLT_ARes.Complete;
			assign UxAS_Dispatch = UXAS.Dispatch;
			assign UxAS_Complete = UXAS.Complete;
		**};

	end SW.Impl;

end SW;
