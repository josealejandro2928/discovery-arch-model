package Drivers
public
	with CASE_Model_Transformations;
	with CMASI;
	with CASEAgree;
	with CASE_Properties;

	thread RadioDriver
		-- The RadioDriver is the software that enables other SW components to communicate to other systems over RF
		features
			recv_data: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			send_data: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;

			-- UxAS
--			AutomationResponse: in event data port CMASI::AutomationResponse.i;
--			AirVehicleState: in event data port CMASI::AirVehicleState.i;
			AutomationRequest: out event data port CMASI::AddressAttributedMessage.i;
			OperatingRegion: out event data port CMASI::AddressAttributedMessage.i;
			LineSearchTask: out event data port CMASI::AddressAttributedMessage.i;

		properties
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 20ms .. 20ms;
	end RadioDriver;

	thread implementation RadioDriver.Impl
		properties
			CASE_Properties::Comm_driver => true;
	end RadioDriver.Impl;

	thread UARTDriver
		-- The UARTDriver is the software that enables other SW components to communicate to other systems over the serial connection
		features
			recv_data: in event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			MissionCommand: in event data port CMASI::MissionCommand.i;

			send_data: out event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			AirVehicleState_WPM: out event data port CMASI::AirVehicleState.i;
			AirVehicleState_UXAS: out event data port CMASI::AirVehicleState.i;
		properties
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 6ms .. 6ms;
			Stack_Size => CM_Property_Set::Stack_Size;
		annex agree {**
			-- 	Virtual Scheduling and Execution Events	
			eq Dispatch: bool;
			eq Complete: bool;
			-- 	AADL/HAMR Semantics
			guarantee Sem_UART_Output_Event_Hold_AirVehicleState_WPM "Output event should hold till next Complete" : 
				not Complete => (event(AirVehicleState_WPM) = prev(event(AirVehicleState_WPM), false));
			guarantee Sem_UART_Output_Data_Hold_AirVehicleState_WPM "Output data should hold till next Complete" : 
				not Complete => (true -> (AirVehicleState_WPM = pre(AirVehicleState_WPM)));
			guarantee Sem_UART_Output_Event_Hold_send_data "Output event should hold till next Complete" : 
				not Complete => (event(send_data) = prev(event(send_data), false));
			guarantee Sem_UART_Output_Data_Hold_send_data "Output data should hold till next Complete" : 
				not Complete => (true -> (send_data = pre(send_data)));
			-- Security Requirements													
			assume Req001_UARTDriver "Assumes recv_data only gets well formed CASE_UART_Msg.Impl types" : 
			  	Dispatch => (event(recv_data) => CASEAgree::WellformedCASE_UART_Msg(recv_data));
			assume Req002_UARTDriver "The UART shall receive valid mission commands" :
				Dispatch => (event(MissionCommand) => CASEAgree::WELL_FORMED_MISSION_COMMAND(MissionCommand));
			guarantee Req003_UARTDRiver "The send_data outputs only well formed CASE_UART_Msg.Impl types" : 
			    	Complete => (event(send_data) => CASEAgree::WellformedCASE_UART_Msg(send_data));
			guarantee Req004_UARTDriver "The UART shall send well-formed air vehicle state messages" : 
			      	Complete => (event(AirVehicleState_WPM) => CASEAgree::WELL_FORMED_AIR_VEHICLE_STATE(AirVehicleState_WPM));
		**};
	end UARTDriver;

	thread implementation UARTDriver.Impl
	end UARTDriver.Impl;

end Drivers;
