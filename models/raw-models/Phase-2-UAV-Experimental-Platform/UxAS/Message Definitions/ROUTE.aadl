----------------------------------------------------------------------------------------------------------------
-- This package defines messages that form the interface to a route planning service. It includes geometric 
-- constructs defining road networks to support the routing of ground vehicles.
----------------------------------------------------------------------------------------------------------------
package ROUTE
public
	with CMASI;
	with Common_Data; renames Common_Data::all;
	with Data_Model;
	
	-- Start/end points and associated heading constraints for a route request
	data RouteConstraints
	end RouteConstraints;
	
	data implementation RouteConstraints.i
	    subcomponents
	        --ID denoting this set of route constraints
	        RouteID: data int64.i;
	        --Location from which the planned route will start
	        StartLocation: data CMASI::Location3D.i;
	        --Heading of entity at the start of the route
	        StartHeading: data real32.i;
	        --If "true" the heading value in StartHeading must be used to start
	        --the route. If not, any starting heading can be used.
	        UseStartHeading: data bool.i;
	        --Location to which the planned route will end
	        EndLocation: data CMASI::Location3D.i;
	        --Heading of entity at the end of the route
	        EndHeading: data real32.i;
	        --If "true" the heading value in EndHeading must be used to end the
	        --route. If not, ant ending heading can be used.
	        UseEndHeading: data bool.i;
	end RouteConstraints.i;

	-- Route request: macro route request for a list of available vehicles
	data RouteRequest		
	end RouteRequest;
	
	data implementation RouteRequest.i
    subcomponents
        --Request ID for correlating with response
        RequestID: data int64.i;
        --Associated Task ID (0 if no associated task) for this set of
        --requests
        AssociatedTaskID: data int64.i;
        --Vehicles to consider when planning. If list is empty, route planner
        --plans for all known vehicles.
        VehicleID: data int64.i {Data_Model::Data_Representation => Array;};
        -- ADDED: AWF (20170808)
        -- Number of VehicleIDs (not necessary if AGREE can get array size)                
        NumVehicleIDs: data int64.i; 
        --Operating region to be considered during planning
        OperatingRegion: data int64.i;
        --List of all requests for this vehicle set + operating region situation
        RouteConstraints: data RouteConstraints.i {Data_Model::Data_Representation => Array;};       
        --Request that planner only return costs of routes rather than
        --complete waypoint plans
        IsCostOnlyRequest: data bool.i;
	end RouteRequest.i;

	--Route response: list of all fulfilled route requests for a complete
	--list of vehicles (see {@link RouteRequest})	
	data RouteResponse		
	end RouteResponse;
	
	data implementation RouteResponse.i
	    subcomponents
	        --Response ID matching ID from request ({@link RouteRequest})
	        ResponseID: data int64.i;
	        --Corresponding route responses for all requested vehicles
	        Routes: data RoutePlanResponse.i {Data_Model::Data_Representation => Array;};
	end RouteResponse.i;

	--Route plan request: find route from the current vehicle position to
	--a point of interest or world location
	data RoutePlanRequest		
	end RoutePlanRequest;
	
	data implementation RoutePlanRequest.i
	subcomponents
			--Request ID for correlating with response
		RequestID: data int64.i;
				--Associated Task ID (0 if no associated task) for this set of
				--requests
		AssociatedTaskID: data int64.i;
				--Vehicle to consider when planning
		VehicleID: data int64.i;
				--Operating region to be considered during planning
		OperatingRegion: data int64.i;
				--List of all requests for this vehicle + operating region situation
				-- AWF (20170808)
				--  The original name of "RouteRequests" was misleading as this field actually describes the
				--  route constraints that the vehicle planners must take in account. 
		RouteConstraints: data RouteConstraints.i {Data_Model::Data_Representation => Array;};
				--Request that planner only return costs of routes rather than
				--complete waypoint plans
		IsCostOnlyRequest: data bool.i;
	end RoutePlanRequest.i;
	
	--Individual route plan
	data RoutePlan
	end RoutePlan;

	data implementation RoutePlan.i
	    subcomponents
	        --ID denoting this plan corresponding with requested route constraint
	        --pair
	        RouteID: data int64.i;
	        --Waypoints that connect the start location with the end location.
	        --Empty if only costs were requested
	        Waypoints: data CMASI::Waypoint.i {Data_Model::Data_Representation => Array;};
	        --Time cost of route. If less than zero, a planning error has occurred
	        RouteCost: data int64.i;
	        --Error messages, if applicable
	        RouteError: data CMASI::KeyValuePair.i {Data_Model::Data_Representation => Array;};
	end RoutePlan.i;

	--Route plan response: list of all fulfilled route requests
	data RoutePlanResponse		
	end RoutePlanResponse;
	
	data implementation RoutePlanResponse.i
	    subcomponents
	        --Response ID matching ID from request ({@link RoutePlanRequest})
	        ResponseID: data int64.i;
	        --Associated Task ID (0 if no associated task) that this set of
	        --responses corresponds to
	        AssociatedTaskID: data int64.i;
	        --Vehicle that was considered during planning
	        VehicleID: data int64.i;
	        --Operating region that was considered during planning
	        OperatingRegion: data int64.i;
	        --List of all responses for this vehicle + operating region situation
	        RouteResponses: data RoutePlan.i {Data_Model::Data_Representation => Array;};
	end RoutePlanResponse.i;

	--Egress route request: find all egress routes (nearby intersections)
	--from a point	
	data EgressRouteRequest		
	end EgressRouteRequest;

	data implementation EgressRouteRequest.i
	    subcomponents
	        --Request ID for correlating with response
	        RequestID: data int64.i;
	        --Location from which to calculate the routes
	        StartLocation: data CMASI::Location3D.i;
	        --The radius of the area of concern
	        Radius: data real32.i;
	end EgressRouteRequest.i;
	
	--Egress route response: returns egress routes (nearby intersections)
	--from a point
	data EgressRouteResponse		
	end EgressRouteResponse;
	
	data implementation EgressRouteResponse.i
	    subcomponents
	        --Response ID matching ID from request ({@link EgressRouteRequest})
	        ResponseID: data int64.i;
	        --The route locations
	        NodeLocations: data CMASI::Location3D.i {Data_Model::Data_Representation => Array;};
	        --The orientations
	        Headings: data real32.i {Data_Model::Data_Representation => Array;};
	end EgressRouteResponse.i;
	
end ROUTE;